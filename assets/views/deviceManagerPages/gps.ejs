<link rel="stylesheet" href="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhcDQt8nBWAx7MV4r-yPZRVqLHvditGTk">
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhcDQt8nBWAx7MV4r-yPZRVqLHvditGTk"></script>

<div class="bg-gray-700 rounded-lg p-4 mb-4">
    <div class="flex flex-col space-y-4">
        <div class="flex border-b border-gray-600">
            <a class="px-6 py-3 text-gray-300 hover:text-white font-medium transition-all duration-200 border-b-2 border-transparent hover:border-blue-400 data-[active=true]:border-blue-500 data-[active=true]:text-white" data-tab="now" data-active="true">
                <i class="fa-solid fa-location-crosshairs mr-2"></i>GPS Now
            </a>
            <a class="px-6 py-3 text-gray-300 hover:text-white font-medium transition-all duration-200 border-b-2 border-transparent hover:border-blue-400 data-[active=true]:border-blue-500 data-[active=true]:text-white" data-tab="log">
                <i class="fa-solid fa-route mr-2"></i>GPS Log
            </a>
            <a class="px-6 py-3 text-gray-300 hover:text-white font-medium transition-all duration-200 border-b-2 border-transparent hover:border-blue-400 data-[active=true]:border-blue-500 data-[active=true]:text-white" data-tab="settings">
                <i class="fa-solid fa-gear mr-2"></i>GPS Settings
            </a>
        </div>

        <% 
let latest = {
    "time": "2000-01-01T00:00:00.005Z",
    "enabled": true,
    "latitude": 0,
    "longitude": 0,
    "altitude": 0,
    "accuracy": 0,
    "speed": 0
  };
if(pageData.length !== 0) {
    if(pageData[pageData.length-1].speed !== undefined) latest = pageData[pageData.length-1];
}
%>

        <div class="tab-content" data-tab="now">
            <div class="rounded-lg overflow-hidden shadow-lg">
                <div id="GPS_NOW_MAP" class="w-full h-[300px] md:h-[400px]"></div>
                <div class="p-4 bg-gray-800">
                    <p class="text-center text-gray-300 mb-4"><%= new Date(latest.time).toLocaleString('en-GB', { timeZone: 'UTC' }) %></p>
                    <button onclick="updateButton(this, '0xLO')" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center justify-center transition-colors">
                        <i class="map marker alternate icon mr-2"></i>
                        Request Update
                    </button>
                </div>
            </div>
        </div>

        <%
let sorted = {};

pageData.forEach((item) => {
    let date = new Date(item.time);
    let month = date.getUTCMonth() + 1;
    let day = date.getUTCDate();
    let year = date.getUTCFullYear();

    newdate = day + "-" + month + "-" + year;
    if(item.latitude !== undefined && item.longitude !== undefined && item.speed !== undefined && item.accuracy !== undefined){
        if(sorted[newdate]) {
            sorted[newdate].push(item);
        } else sorted[newdate] = [item];
    }
});
%>

        <div class="tab-content hidden" data-tab="log">
            <div class="rounded-lg overflow-hidden shadow-lg mb-4">
                <div id="GPS_LOG_MAP" class="w-full h-[400px] md:h-[500px]"></div>
            </div>

            <div class="overflow-x-auto">
                <table class="w-full text-gray-300">
                    <thead class="bg-gray-800">
                        <tr>
                            <th class="px-4 py-2 text-left">Date</th>
                            <th class="px-4 py-2 text-left">Entries</th>
                            <th class="px-4 py-2 text-left">View</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% for (const [key, value] of Object.entries(sorted)) { %>
                        <tr class="border-b border-gray-600 hover:bg-gray-600">
                            <td class="px-4 py-2"><%= key %></td>
                            <td class="px-4 py-2"><%= value.length %></td>
                            <td class="px-4 py-2">
                                <a href="#" onclick="loadLogToMap('<%= key %>')" class="text-blue-400 hover:text-blue-300">
                                    <i class="fa-solid fa-eye"></i>
                                </a>
                            </td>
                        </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="tab-content hidden" data-tab="settings">
            <div class="bg-gray-800 p-4 rounded-lg">
                <p class="text-gray-300 mb-4">Set how often you want to poll the client for an updated GPS position below<br>
                    recommended intervals above 5 minutes, anything less would be of no benefit</p>
                <div class="flex items-center space-x-2">
                    <input type="number" placeholder="Interval" id="gpsInterval" class="bg-gray-700 text-gray-300 px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <div class="relative">
                        <select id="intervalMeasure" class="bg-gray-700 text-gray-300 px-3 py-2 rounded-lg appearance-none pr-8 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="minutes">minutes</option>
                            <option value="hours">hours</option>
                            <option value="seconds">seconds</option>
                        </select>
                        <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                            <i class="fas fa-chevron-down text-gray-400"></i>
                        </div>
                    </div>
                    <button onclick="updateGPSInterval()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">SET</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Tab switching functionality
    document.querySelectorAll('[data-tab]').forEach(tab => {
        tab.addEventListener('click', () => {
            // Remove active state from all tabs
            document.querySelectorAll('[data-tab]').forEach(t => {
                t.setAttribute('data-active', 'false');
                if (t.classList.contains('tab-content')) {
                    t.classList.add('hidden');
                }
            });

            // Add active state to clicked tab
            tab.setAttribute('data-active', 'true');
            
            // Show corresponding content
            const tabContent = document.querySelector(`.tab-content[data-tab="${tab.getAttribute('data-tab')}"]`);
            if (tabContent) {
                tabContent.classList.remove('hidden');
                if (tab.getAttribute('data-tab') === 'now') {
                    google.maps.event.trigger(GPS_NOW_MAP, 'resize');
                    GPS_NOW_MAP.setCenter({ lat: <%= latest.latitude %>, lng: <%= latest.longitude %> });
                } else if (tab.getAttribute('data-tab') === 'log') {
                    google.maps.event.trigger(GPS_LOG_MAP, 'resize');
                    const lastDate = '<%= Object.keys(sorted)[Object.keys(sorted).length -1] %>';
                    if (lastDate) {
                        loadLogToMap(lastDate);
                    }
                }
            }
        });
    });

    var mapData = <%- JSON.stringify(sorted) %>;
    loadLogToMap('<%= Object.keys(sorted)[Object.keys(sorted).length -1] %>');

    // Initialize first tab
    document.querySelector('[data-tab="now"]').click();
</script>

<script>
    var GPS_NOW_MAP;
    var currentLocationMarker;
    var GPS_LOG_MAP;
    var logLayer;

    function initMaps() {
        // Initialize GPS NOW map
        GPS_NOW_MAP = new google.maps.Map(document.getElementById('GPS_NOW_MAP'), {
            zoom: 13,
            center: { lat: <%= latest.latitude %>, lng: <%= latest.longitude %> },
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        currentLocationMarker = new google.maps.Marker({
            position: { lat: <%= latest.latitude %>, lng: <%= latest.longitude %> },
            map: GPS_NOW_MAP,
            title: 'Current Location'
        });

        const infoWindow = new google.maps.InfoWindow({
            content: "<b>Time:</b> <%= new Date(latest.time).toLocaleString('en-GB', { timeZone: 'UTC' }) %><br><b>speed:</b> <%= latest.speed.toFixed(2) %>mph<br><b>Accuracy:</b> <%= latest.accuracy.toFixed(2) %>m"
        });

        currentLocationMarker.addListener('click', () => {
            infoWindow.open(GPS_NOW_MAP, currentLocationMarker);
        });

        // Initialize GPS LOG map
        GPS_LOG_MAP = new google.maps.Map(document.getElementById('GPS_LOG_MAP'), {
            zoom: 13,
            center: { lat: <%= latest.latitude %>, lng: <%= latest.longitude %> },
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        // Load initial log data after a short delay to ensure map is ready
        const lastDate = '<%= Object.keys(sorted)[Object.keys(sorted).length -1] %>';
        if (lastDate) {
            google.maps.event.addListenerOnce(GPS_LOG_MAP, 'idle', () => {
                loadLogToMap(lastDate);
            });
        }
    }

    function loadLogToMap(date) {
        const data = mapData[date];
        if (!data || !data.length) return;

        // Ensure GPS_LOG_MAP is initialized
        if (!GPS_LOG_MAP) {
            setTimeout(() => loadLogToMap(date), 500);
            return;
        }

        const path = data.map(({ latitude, longitude }) => ({ lat: latitude, lng: longitude }));
        
        // Clear previous markers and paths
        if (window.currentPath) {
            window.currentPath.setMap(null);
        }
        if (window.markers) {
            window.markers.forEach(marker => marker.setMap(null));
        }
        window.markers = [];

        // Draw new path
        window.currentPath = new google.maps.Polyline({
            path: path,
            geodesic: true,
            strokeColor: '#4285F4',
            strokeOpacity: 1.0,
            strokeWeight: 3
        });
        window.currentPath.setMap(GPS_LOG_MAP);

        // Add markers for each point with proper icon
        data.forEach(point => {
            const marker = new google.maps.Marker({
                position: { lat: point.latitude, lng: point.longitude },
                map: GPS_LOG_MAP,
                icon: {
                    path: google.maps.SymbolPath.CIRCLE,
                    fillColor: '#4285F4',
                    fillOpacity: 1,
                    strokeColor: '#ffffff',
                    strokeWeight: 2,
                    scale: 7
                }
            });

            const infoWindow = new google.maps.InfoWindow({
                content: `<div style="padding: 10px">
                    <p style="margin: 0 0 5px 0; font-weight: bold">Time: ${new Date(point.time).toLocaleString('en-GB', { timeZone: 'UTC' })}</p>
                    <p style="margin: 0 0 5px 0">Speed: ${point.speed.toFixed(2)} mph</p>
                    <p style="margin: 0">Accuracy: ${point.accuracy.toFixed(2)} m</p>
                </div>`
            });

            marker.addListener('click', () => {
                infoWindow.open(GPS_LOG_MAP, marker);
            });

            window.markers.push(marker);
        });

        // Fit bounds to show all markers
        if (path.length > 0) {
            const bounds = new google.maps.LatLngBounds();
            path.forEach(point => bounds.extend(point));
            GPS_LOG_MAP.fitBounds(bounds);
        }
    }

    // Initialize maps when page loads
    google.maps.event.addDomListener(window, 'load', initMaps);
</script>